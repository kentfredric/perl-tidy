.\" Automatically generated by Pod::Man version 1.16
.\" Mon Nov 19 13:17:41 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "PERLTIDY 1"
.TH PERLTIDY 1 "perl v5.6.1" "2001-11-19" "User Contributed Perl Documentation"
.UC
.SH "NAME"
perltidy \- a perl script indenter and reformatter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    perltidy [ options ] file1 file2 file3 ...
\&            (output goes to file1.tdy, file2.tdy, file3.tdy, ...)
\&    perltidy [ options ] file1 -o outfile
\&    perltidy [ options ] file1 -st >outfile
\&    perltidy [ options ] <infile >outfile
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perltidy reads a perl script and writes an indented, reformatted script.
The default formatting tries to follow the recommendations in \fIperlstyle\fR\|(1).
.PP
Many users will find enough information in the section on "EXAMPLES" to get 
started.  New users may benefit from the short tutorial which
comes with the distribution.
.PP
The formatting can be controlled in detail with numerous input parameters, 
which are described in the section on "OPTIONS".  
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&  perltidy somefile.pl
.Ve
This will produce a file \fIsomefile.pl.tdy\fR containing the script reformatted
using the default options, which approximate the style suggested in 
\&\fIperlstyle\fR\|(1).  Perltidy never changes the input file.
.PP
.Vb 1
\&  perltidy *.pl
.Ve
Execute perltidy on all \fI.pl\fR files in the current directory with the
default options.  The output will be in files with an appended \fI.tdy\fR
extension.  For any file with an error, there will be a file with extension
\&\fI.ERR\fR.
.PP
.Vb 1
\&  perltidy -gnu somefile.pl
.Ve
Execute perltidy on file \fIsomefile.pl\fR with a style which approximates the
\&\s-1GNU\s0 Coding Standards for C programs.  The output will be \fIsomefile.pl.tdy\fR.
.PP
.Vb 1
\&  perltidy -i=3 somefile.pl
.Ve
Execute perltidy on file \fIsomefile.pl\fR, with 3 columns for each level of
indentation (\fB\-i=3\fR) instead of the default 4 columns.  There will not be any
tabs in the reformatted script, except for any which already exist in comments,
pod documents, quotes, and here documents.  Output will be \fIsomefile.pl.tdy\fR. 
.PP
.Vb 1
\&  perltidy -i=3 -t somefile.pl
.Ve
Same as the previous example, except that each set of 3 columns of indentation
(\fB\-i=3\fR) will be represented by one leading tab character (\fB\-t\fR).
.PP
.Vb 1
\&  perltidy -ce -l=72 somefile.pl
.Ve
Execute perltidy on file \fIsomefile.pl\fR with all defaults except use \*(L"cuddled
elses\*(R" (\fB\-ce\fR) and a maximum line length of 72 columns (\fB\-l=72\fR) instead of
the default 80 columns.  
.PP
.Vb 1
\&  perltidy -g somefile.pl
.Ve
Execute perltidy on file \fIsomefile.pl\fR and save a log file \fIsomefile.pl.LOG\fR
which shows the nesting of braces, parentheses, and square brackets at
the start of every line.
.SH "OPTIONS"
.IX Header "OPTIONS"
The entire command line is scanned for options, and they are processed
before any files are processed.  As a result, it does not matter
whether flags are before or after any filenames.  However, the relative
order of parameters is important, with later parameters overriding the
values of earlier parameters.
.PP
For each parameter, there is a long name and a short name.  The short
names are convenient for keyboard input, while the long names are
self-documenting and therefore useful in scripts.  It is customary to
use two leading dashes for long names, but one may be used.
.PP
Most parameters which serve as on/off flags can be negated with a
leading \*(L"n\*(R" (for the short name) or a leading \*(L"no\*(R" (for the long
name).  For example, the flag to use tabs is \fB\-t\fR or \fB\*(--tabs\fR.  The
flag to use no tabs (the default) is \fB\-nt\fR or \fB\*(--notabs\fR.
.PP
Options may not be bundled together.  In other words, options \fB\-q\fR and
\&\fB\-g\fR may \s-1NOT\s0 be entered as \fB\-qg\fR.
.PP
Option names may be terminated early as long as they are uniquely identified.
For example, instead of \fB\-dump-token-types\fR, it would be sufficient to enter
\&\fB\-dump-tok\fR, or even \fB\-dump-t\fR, to uniquely identify this command.
.Sh "I/O control"
.IX Subsection "I/O control"
.Ip "\fB\-h\fR,    \fB\*(--help\fR" 4
.IX Item "-h,    help"
Show summary of usage and exit.
.Ip "\fB\-o\fR=filename,    \fB\*(--outfile\fR=filename" 4
.IX Item "-o=filename,    outfile=filename"
Name of the output file (only if a single input file is being
processed).  If no output file is specified, and output is not
redirected to the standard output, the output will go to \fIfilename.tdy\fR.
.Ip "\fB\-st\fR,    \fB\*(--standard-output\fR" 4
.IX Item "-st,    standard-output"
Perltidy must be able to operate on an arbitrarily large number of files
in a single run, with each output being directed to a different output
file.  Obviously this would conflict with outputting to the single
standard output device, so a special flag, \fB\-st\fR, is required to
request outputting to the standard output.  For example,
.Sp
.Vb 1
\&  perltidy somefile.pl -st >somefile.new.pl
.Ve
This option may only be used if there is just a single input file.  When
this option is used, perltidy will have to create a temporary copy of
the output file, perltidy.TMPO, to feed to perl for syntax checking,
unless allow syntax checking is disabled.  This file will be deleted
when the job finishes.  The default is \fB\-nst\fR or \fB\-nostandard-output\fR.
.Ip "\fB\-se\fR,    \fB\*(--standard-error-output\fR" 4
.IX Item "-se,    standard-error-output"
If perltidy detects an error when processing file \fIsomefile.pl\fR, its
default behavior is to write error messages to file \fIsomefile.pl.ERR\fR.
Use \fB\-se\fR to cause all error messages to be sent to the standard error
output stream instead.  This directive may be negated with \fB\-nse\fR. 
Thus, you may place \fB\-se\fR in a \fI.perltidyrc\fR and override it
when desired with \fB\-nse\fR on the command line.
.Ip "\fB\-w\fR,    \fB\*(--warning-output\fR" 4
.IX Item "-w,    warning-output"
Setting \fB\-w\fR causes perltidy to include any non-critical warning
messages be reported as errors.  These include messages
about possible pod problems, possibly bad starting indentation level,
and cautions about indirect object usage.  The default, \fB\-nw\fR or
\&\fB\*(--nowarning-output\fR, is not to include these warnings.
.Ip "\fB\-q\fR,    \fB\*(--quiet\fR" 4
.IX Item "-q,    quiet"
Deactivate error messages and syntax checking (for running under
an editor). 
.Sp
For example, if you use a vi-style editor, such as vim, you may execute
perltidy as a filter from within the editor using something like
.Sp
.Vb 1
\& :n1,n2!perltidy -q
.Ve
where \f(CW\*(C`n1,n2\*(C'\fR represents the selected text.  Without the \fB\-q\fR flag,
any error messages will mess up your screen.  Besides, it is common to
run perltidy on incomplete blocks from an editor, and you don't want to
see any complaints about that.  (Or maybe you do; in that case, be
prepared to use your \*(L"undo\*(R" key).
.Ip "\fB\-syn\fR,   \fB\*(--check-syntax\fR" 4
.IX Item "-syn,   check-syntax"
This causes perltidy to run \f(CW\*(C`perl \-T \-c\*(C'\fR to check syntax of input and output.
The results are written to the \fI.LOG\fR file, which will be saved if an error
is detected in the output script.  The output script is not checked if the
input script has a syntax error.  To skip syntax checking, use \fB\-nsyn\fR or
\&\fB\*(--nocheck-syntax\fR.  Syntax checking is also deactivated by the \fB\*(--quiet\fR
flag, discussed above.
.Sp
The default is to do a syntax check.
.Ip "\fB\-log\fR,    \fB\*(--logfile\fR" 4
.IX Item "-log,    logfile"
Save the \fI.LOG\fR file, which has many useful diagnostics.  Perltidy always
creates a \fI.LOG\fR file, but by default it is deleted unless a program bug is
suspected.  Setting the \fB\-log\fR flag forces the log file to be saved.
.Ip "\fB\-g=n\fR, \fB\*(--logfile-gap=n\fR" 4
.IX Item "-g=n, logfile-gap=n"
Set maximum interval between input code lines in the logfile.  This purpose of
this flag is to assist in debugging nesting errors.  The value of \f(CW\*(C`n\*(C'\fR is
optional.  If you set the flag \fB\-g\fR without the value of \f(CW\*(C`n\*(C'\fR, it will be
taken to be 1, meaning that every line will be written to the log file.  This
can be helpful if you are looking for a brace, paren, or bracket nesting error. 
.Sp
Setting \fB\-g\fR also causes the logfile to be saved, so it is not necessary to
also include \fB\-log\fR. 
.Sp
If no \fB\-g\fR flag is given, a value of 50 will be used, meaning that at least
every 50th line will be recorded in the logfile.  This helps prevent
excessively long log files.  
.Sp
Setting a negative value of \f(CW\*(C`n\*(C'\fR is the same as not setting \fB\-g\fR at all.
.Ip "\fB\-npro\fR  \fB\*(--noprofile\fR" 4
.IX Item "-npro  noprofile"
Ignore any \fI.perltidyrc\fR command file.  Normally, perltidy looks first in
your current directory for a \fI.perltidyrc\fR file of parameters.  (The format
is described below).  If it finds one, it applies those options to the
initial default values, and then it applies any that have been defined
on the command line.  If no \fI.perltidyrc\fR file is found, it looks for one
in your home directory.
.Sp
If you set the \fB\-npro\fR flag, perltidy will not look for this file.
.Ip "\fB\-pro=filename\fR or  \fB\*(--profile=filename\fR" 4
.IX Item "-pro=filename or  profile=filename"
To simplify testing and switching .perltidyrc files, this command may be
used to specify a configuration file which will override the default
name of .perltidyrc.  There must not be a space on either side of the
\&'=' sign.  For example, the line
.Sp
.Vb 1
\&   perltidy -pro=testcfg
.Ve
would cause file \fItestcfg\fR to be used instead of the 
default \fI.perltidyrc\fR.
.Ip "\fB\-opt\fR,   \fB\*(--show-options\fR" 4
.IX Item "-opt,   show-options"
Write a list of all options used to the \fI.LOG\fR file.  This is useful for
debugging command files.  In the list, the status of on/off
switches is indicated by a 0 for off and a 1 for on.  Please see
\&\fB\*(--dump-options\fR for a simpler way to do this.
.Ip "\fB\-f\fR,   \fB\*(--force-read-binary\fR" 4
.IX Item "-f,   force-read-binary"
Force perltidy to process binary files.  To avoid producing excessive
error messages, perltidy skips files identified by the system as non-text.
However, valid perl scripts containing binary data may sometimes be identified
as non-text, and this flag forces perltidy to process them.
.Sh "Basic Options"
.IX Subsection "Basic Options"
.Ip "\fB\-l=n\fR, \fB\*(--maximum-line-length=n\fR" 4
.IX Item "-l=n, maximum-line-length=n"
The default maximum line length is n=80 characters.  Perltidy will try
to find line break points to keep lines below this length. However, long
quotes and side comments may cause lines to exceed this length. 
Setting \fB\-l=0\fR is equivalent to setting \fB\-l=(a large number)\fR. 
.Ip "\fB\-i=n\fR,  \fB\*(--indent-columns=n\fR" 4
.IX Item "-i=n,  indent-columns=n"
Use n columns per indentation level (default n=4).
.Sp
See also \fB\*(--tabs\fR.
.Ip "\fB\-t\fR,   \fB\*(--tabs\fR" 4
.IX Item "-t,   tabs"
This flag defines the characters used to indicate the indentation level
of each line of code to be tabs.  Perltidy allows two possible ways to
represent the indentation at the beginning of each line of code.  You
may either use one tab character per level of indentation (signified
with the \-t flag), or you may use n real space characters per level,
(where n is defined by the \-i flag).  The default is to use \s-1ASCII\s0 space
characters because they should be properly displayed on all editors or
viewers, even though they are not always the most convenient for
editing. Of course, you can always rerun perltidy to change the
indentation characters.
.Sp
If you choose tabs, you will want to give the appropriate setting to
your editor to display tabs as 4 blanks (or whatever value has been set
with the \fB\-i\fR command).  
.Sp
Except for these possible tab indentation characters, Perltidy does not
introduce any tab characters into your file, and it removes any tabs
from the code (unless requested not to do so with \fB\-fws\fR).  If you have
any tabs in your comments, quotes, or here-documents, they will remain.
.Sp
Certain commands are incompatible with tabs, and if these are given,
then a warning message will be given and tabs will be deactivated.  An
example is the \fB\-lp\fR option.
.Sp
The default and recommendation is \fB\-nt\fR (or \fB\*(--notabs\fR).
.Ip "\fB\-io\fR,   \fB\*(--indent-only\fR" 4
.IX Item "-io,   indent-only"
This flag is used to deactivate all formatting and line break changes.
When it is in effect, the only change to the script will be indentation.
And any flags controlling whitespace and newlines will be ignored.  You
might want to use this if you are perfectly happy with your whitespace
and line breaks, and merely want perltidy to handle the indentation.
(This also speeds up perltidy by well over a factor of two, so it might be
useful when perltidy is merely being used to help find a brace error in
a large script).
.Sp
Setting this flag is equivalent to setting \fB\*(--freeze-newlines\fR and
\&\fB\*(--freeze-whitespace\fR.
.Sh "Code Indentation Control"
.IX Subsection "Code Indentation Control"
.Ip "\fB\-ci=n\fR, \fB\*(--continuation-indentation=n\fR" 4
.IX Item "-ci=n, continuation-indentation=n"
Continuation indentation is extra indentation spaces applied when
a long line is broken.  The default is n=2, illustrated here:
.Sp
.Vb 2
\& my $level =   # -ci=2      
\&   ( $max_index_to_go >= 0 ) ? $levels_to_go[0] : $last_output_level;
.Ve
The same example, with n=0, is a little harder to read:
.Sp
.Vb 2
\& my $level =   # -ci=0    
\& ( $max_index_to_go >= 0 ) ? $levels_to_go[0] : $last_output_level;
.Ve
The value given to \fB\-ci\fR is also used by some commands when a small
space is required.  Examples are commands for outdenting labels, \fB\-ola\fR,
and control keywords, \fB\-ock\fR.
.Ip "\fB\-sil=n\fR \fB\*(--starting-indentation-level=n\fR" 4
.IX Item "-sil=n starting-indentation-level=n"
By default, perltidy examines the input file and tries to determine the
starting indentation level.  While it is often zero, it may not be
zero for a code snippet being sent from an editing session.  If the
default method does not work correctly, or you want to change the
starting level, use \fB\-sil=n\fR, to force the starting level to be n.
.Ip "List indentation using \fB\-lp\fR, \fB\*(--line-up-parentheses\fR" 4
.IX Item "List indentation using -lp, line-up-parentheses"
By default, perltidy indents lists with 4 spaces, or whatever value
is specified with \fB\-i=n\fR.  Here is a small list formatted in this way:
.Sp
.Vb 4
\&    @month_of_year = (
\&        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',
\&        'Nov', 'Dec'
\&    );
.Ve
Use the \fB\-lp\fR flag to add extra indentation to cause the data to begin
past the opening parentheses of a sub call or list, or opening square
bracket of an anonymous array, or opening curly brace of an anonymous
hash.  With this option set, the above list would become:
.Sp
.Vb 4
\&    @month_of_year = (
\&                       'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug',
\&                       'Sep', 'Oct', 'Nov', 'Dec'
\&    );
.Ve
If the available line length (see \fB\-l=n\fR ) does not permit this much 
space, perltidy will use less.  
.Sp
This option has no effect on code \s-1BLOCKS\s0, such as if/then/else blocks,
which always use whatever is specified with \fB\-i=n\fR.  Also, the
existence of line breaks and/or block comments between the opening and
closing parens may cause perltidy to temporarily revert to its default
method.
.Sp
Note: The \fB\-lp\fR option may not be used together with the \fB\-t\fR tabs option.
If \fB\-t\fR is specified, it will be ignored.
.Sp
In addition, any parameter which restricts the ability of perltidy to
choose newlines will all conflict with \fB\-lp\fR and will cause \fB\-lp\fR to
be deactivated.  These include 
\&\fB\-io\fR, \fB\-fnl\fR, \fB\-nanl\fR, and \fB\-ndnl\fR.
.Ip "\fB\-icp\fR, \fB\*(--indent-closing-paren\fR" 4
.IX Item "-icp, indent-closing-paren"
The \fB\-icp\fR option leaves a list-termination line of the form \f(CW\*(C`);\*(C'\fR, \f(CW\*(C`};\*(C'\fR,
or \f(CW\*(C`];\*(C'\fR indented with the same indentation as the previous line.  The
previous example with \fB\-icp\fR would give,
.Sp
.Vb 4
\&    @month_of_year = (          # -icp
\&        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',
\&        'Nov', 'Dec'
\&        );
.Ve
.Ip "\fB\-icb\fR, \fB\*(--indent-closing-brace\fR" 4
.IX Item "-icb, indent-closing-brace"
The \fB\-icb\fR option leaves a brace which terminates a code block 
indented with the same indentation as the previous line.  For example,
.Sp
.Vb 6
\&        if ($task) {
\&            yyy();
\&            }    # -icb
\&        else {
\&            zzz();
\&            }
.Ve
The default is not to do this, indicated by \fB\-nicb\fR.
.Ip "\fB\-olq\fR, \fB\*(--outdent-long-quotes\fR" 4
.IX Item "-olq, outdent-long-quotes"
When \fB\-olq\fR is set, lines which is a quoted string longer than the
value \fBmaximum-line-length\fR will have their indentation removed to make
them more readable.  This is the default.  To prevent such out-denting,
use \fB\-nolq\fR or \fB\*(--nooutdent-long-lines\fR.
.Ip "\fB\-oll\fR, \fB\*(--outdent-long-lines\fR" 4
.IX Item "-oll, outdent-long-lines"
This command is equivalent to \fB\*(--outdent-long-quotes\fR and
\&\fB\*(--outdent-long-comments\fR, and it is included for compatibility with previous
versions of perltidy.  The negation of this also works, \fB\-noll\fR or
\&\fB\*(--nooutdent-long-lines\fR, and is equivalent to setting \fB\-nolq\fR and \fB\-nolc\fR.
.Ip "Outdenting Labels: \fB\-ola\fR,  \fB\*(--outdent-labels\fR" 4
.IX Item "Outdenting Labels: -ola,  outdent-labels"
This command will cause labels to be outdented by 2 spaces (or whatever
\&\fB\-ci\fR has been set to), if possible.  For example, with \fBperltidy \-ola\fR:
.Sp
.Vb 6
\&        my $i;
\&      LOOP: while ( $i = <FOTOS> ) {
\&            chomp($i);
\&            next unless $i;
\&            fixit($i);
\&        }
.Ve
Labels which are already at the leftmost column will not be affected by
this command.  Use \fB\-nola\fR to not outdent labels.  The current
default is not to outdent labels.
.Ip "Outdenting Keywords" 4
.IX Item "Outdenting Keywords"
.RS 4
.PD 0
.Ip "\fB\-okw\fR,  \fB\*(--outdent-keywords\fR" 4
.IX Item "-okw,  outdent-keywords"
.PD
The command \fB\-okw\fR will will cause certain leading control keywords to
be outdented by 2 spaces (or whatever \fB\-ci\fR has been set to), if
possible.  By default, these keywords are \f(CW\*(C`redo\*(C'\fR, \f(CW\*(C`next\*(C'\fR, \f(CW\*(C`last\*(C'\fR,
\&\f(CW\*(C`goto\*(C'\fR, and \f(CW\*(C`return\*(C'\fR.  The intention is to make these control keywords
easier to see.  To change this list of keywords being outdented, see
the next section.
.Sp
For example, using \f(CW\*(C`perltidy \-ock\*(C'\fR on the previous example gives:
.Sp
.Vb 6
\&        my $i;
\&        LOOP: while ( $i = <FOTOS> ) {
\&            chomp($i);
\&          next unless $i;
\&            fixit($i);
\&        }
.Ve
The default is not to do this.  
.Ip "Specifying Outdented Keywords: \fB\-okwl=string\fR,  \fB\*(--outdent-keyword-list=string\fR" 4
.IX Item "Specifying Outdented Keywords: -okwl=string,  outdent-keyword-list=string"
This command can be used to change the keywords which are outdented with
the \fB\-okw\fR command.  The parameter \fBstring\fR is a required list of perl
keywords, which should be placed in quotes if there are more than one.
By itself, it does not cause any outdenting to occur, so the \fB\-okw\fR
command is still required.
.Sp
For example, the commands \f(CW\*(C`\-okwl="next last redo goto" \-okw\*(C'\fR will cause
those four keywords to be outdented.  It is probably simplest to place
any \fB\-okwl\fR command in a \fI.perltidyrc\fR file.
.RE
.RS 4
.RE
.Sh "Whitespace Control"
.IX Subsection "Whitespace Control"
Whitespace refers to the blank space between variables, operators,
and other code tokens.
.Ip "\fB\-fws\fR,  \fB\*(--freeze-whitespace\fR" 4
.IX Item "-fws,  freeze-whitespace"
This flag causes your original whitespace to remain unchanged, and
causes the rest of the whitespace commands in this section, the
Code Indentation section, and
the Comment Control section to be ignored.
.Ip "Tightness of curly braces, parentheses, and square brackets." 4
.IX Item "Tightness of curly braces, parentheses, and square brackets."
Here the term \*(L"tightness\*(R" will mean the closeness with which
pairs of enclosing tokens, such as parentheses, contain the quantities
within.  A numerical value of 0, 1, or 2 defines the tightness, with
0 being least tight and 2 being most tight.
.Sp
The \fB\-pt=n\fR or \fB\*(--paren-tightness\fR parameter controls the space within
parens.  The example below shows the effect of the three possible
values, 0, 1, and 2:
.Sp
.Vb 3
\& if ( ( my $len_tab = length( $tabstr ) ) > 0 ) {  # -pt=0
\& if ( ( my $len_tab = length($tabstr) ) > 0 ) {    # -pt=1 (default)
\& if ((my $len_tab = length($tabstr)) > 0) {        # -pt=2
.Ve
When n is 0, there is always a space to the right of a '(' and to the left
of a ')'.  For n=2 there is never a space.  For n=1, the default, there
is a space unless the quantity within the parens is a single token, such
as an identifier or quoted string.  
.Sp
Likewise, the parameter \fB\-sbt=n\fR or \fB\*(--square-bracket-tightness\fR
controls the space within square brackets, as illustrated below.
.Sp
.Vb 3
\& $width = $col[ $j + $k ] - $col[ $j ];  # -sbt=0
\& $width = $col[ $j + $k ] - $col[$j];    # -sbt=1 (default)
\& $width = $col[$j + $k] - $col[$j];      # -sbt=2
.Ve
Curly braces which do not contain code blocks are controlled by
the parameter \fB\-bt=n\fR or \fB\*(--brace-tightness=n\fR. 
.Sp
.Vb 3
\& $obj->{ $parsed_sql->{ 'table' }[0] };    # -bt=0
\& $obj->{ $parsed_sql->{'table'}[0] };      # -bt=1 (default)
\& $obj->{$parsed_sql->{'table'}[0]};        # -bt=2
.Ve
And finally, curly braces which contain blocks of code are controlled by the
parameter \fB\-bbt=n\fR or \fB\*(--block-brace-tightness=n\fR as illustrated in the
example below.   
.Sp
.Vb 3
\& %bf = map { $_ => -M $_ } grep { /\e.deb$/ } dirents '.'; # -bbt=0 (default)
\& %bf = map { $_ => -M $_ } grep {/\e.deb$/} dirents '.';   # -bbt=1
\& %bf = map {$_ => -M $_} grep {/\e.deb$/} dirents '.';     # -bbt=2
.Ve
.Ip "\fB\-sts\fR,   \fB\*(--space-terminal-semicolon\fR" 4
.IX Item "-sts,   space-terminal-semicolon"
Some programmers prefer a space before all terminal semicolons.  The
default is for no such space, and is indicated with \fB\-nsts\fR or
\&\fB\*(--nospace-terminal-semicolon\fR.
.Sp
.Vb 2
\&        $i = 1 ;     #  -sts
\&        $i = 1;      #  -nsts   (default)
.Ve
.Ip "\fB\-sfs\fR,   \fB\*(--space-for-semicolon\fR" 4
.IX Item "-sfs,   space-for-semicolon"
Semicolons within \fBfor\fR loops may sometimes be hard to see,
particularly when commas are also present.  This option places spaces on
both sides of these special semicolons, and is the default.  Use
\&\fB\-nsfs\fR or \fB\*(--nospace-for-semicolon\fR to deactivate it.
.Sp
.Vb 2
\& for ( @a = @$ap, $u = shift @a ; @a ; $u = $v ) {  # -sfs (default)
\& for ( @a = @$ap, $u = shift @a; @a; $u = $v ) {    # -nsfs
.Ve
.Ip "\fB\-asc\fR,  \fB\*(--add-semicolons\fR" 4
.IX Item "-asc,  add-semicolons"
Setting \fB\-asc\fR allows perltidy to add any missing optional semicolon at the end 
of a line which is followed by a closing curly brace on the next line.  This
is the default, and may be deactivated with \fB\-nasc\fR or \fB\*(--noadd-semicolons\fR.
.Ip "\fB\-dsm\fR,  \fB\*(--delete-semicolons\fR" 4
.IX Item "-dsm,  delete-semicolons"
Setting \fB\-dsm\fR allows perltidy to delete extra semicolons which are
simply empty statements.  This is the default, and may be deactivated
with \fB\-ndsm\fR or \fB\*(--nodelete-semicolons\fR.  (Such semicolons are not
deleted, however, if they would promote a side comment to a block
comment).
.Ip "\fB\-aws\fR,  \fB\*(--add-whitespace\fR" 4
.IX Item "-aws,  add-whitespace"
Setting this option allows perltidy to add certain whitespace improve
code readability.  This is the default. If you do not want any
whitespace added, but are willing to have some whitespace deleted, use
\&\fB\-naws\fR.  (Use \fB\-fws\fR to leave whitespace completely unchanged).
.Ip "\fB\-dws\fR,  \fB\*(--delete-old-whitespace\fR" 4
.IX Item "-dws,  delete-old-whitespace"
Setting this option allows perltidy to remove some old whitespace
between characters, if necessary.  This is the default.  If you
do not want any old whitespace removed, use \fB\-ndws\fR or
\&\fB\*(--nodelete-old-whitespace\fR.
.Ip "Detailed whitespace controls" 4
.IX Item "Detailed whitespace controls"
For those who want more detailed control over the whitespace around
tokens, there are four parameters which can directly modify the default
whitespace rules built into perltidy for any token.  They are:
.Sp
\&\fB\-wls=s\fR or \fB\*(--want-left-space=s\fR,
.Sp
\&\fB\-nwls=s\fR or \fB\*(--nowant-left-space=s\fR,
.Sp
\&\fB\-wrs=s\fR or \fB\*(--want-right-space=s\fR,
.Sp
\&\fB\-nwrs=s\fR or \fB\*(--nowant-right-space=s\fR.
.Sp
These parameters are each followed by a quoted string, \fBs\fR, containing a
list of token types.  No more than one of each of these parameters
should be specified, because repeating a command-line parameter
always overwrites the previous one before perltidy ever sees it.
.Sp
To illustrate how these are used, suppose it is desired that there be no
space on either side of the token types \fB= + \- / *\fR.  The following two
parameters would specify this desire:
.Sp
.Vb 1
\&  -nwls="= + - / *"    -nwrs="= + - / *"
.Ve
(Note that the token types are in quotes, and that they are separated by
spaces).  With these modified whitespace rules, the following line of math:
.Sp
.Vb 1
\&  $root = -$b + sqrt( $b * $b - 4. * $a * $c ) / ( 2. * $a );
.Ve
becomes this:
.Sp
.Vb 1
\&  $root=-$b+sqrt( $b*$b-4.*$a*$c )/( 2.*$a );
.Ve
These parameters should be considered to be hints to perltidy rather
than fixed rules, because perltidy must try to resolve conflicts that
arise between them and all of the other rules that it uses.  One
conflict that can arise is if, between two tokens, the left token wants
a space and the right one doesn't.  In this case, the token not wanting
a space takes priority.  
.Sp
It is necessary to have a list of all token types in order to create
this type of input.  Such a list can be obtained by the command
\&\fB\-dump-token-types\fR.
.if n .Ip "Trimming whitespace around \f(CW""""qw""""\fR quotes" 4
.el .Ip "Trimming whitespace around \f(CWqw\fR quotes" 4
.IX Item "Trimming whitespace around qw quotes"
\&\fB\-tqw\fR or \fB\*(--trim-qw\fR provide the default behavior of trimming
spaces around multiline \f(CW\*(C`qw\*(C'\fR quotes and indenting them appropriately.
.Sp
\&\fB\-ntqw\fR or \fB\*(--notrim-qw\fR cause leading and trailing whitespace around
multi-line \f(CW\*(C`qw\*(C'\fR quotes to be left unchanged.  This option will not
normally be necessary, but was added for testing purposes, because in
some versions of perl, trimming \f(CW\*(C`qw\*(C'\fR quotes changes the syntax tree.
.Sh "Comment Controls"
.IX Subsection "Comment Controls"
Perltidy has a number of ways to control the appearance of both block comments
and side comments.  The term \fBblock comment\fR here refers to a full-line
comment, whereas \fBside comment\fR will refer to a comment which appears on a
line to the right of some code.
.Ip "\fB\-ibc\fR,  \fB\*(--indent-block-comments\fR" 4
.IX Item "-ibc,  indent-block-comments"
Block comments normally look best when they are indented to the same
level as the code which follows them.  This is the default behavior, but
you may use \fB\-nibc\fR to keep block comments left-justified.  Here is an
example:
.Sp
.Vb 2
\&             # this comment is indented      (-ibc, default)
\&             if ($task) { yyy(); }
.Ve
The alternative is \fB\-nibc\fR:
.Sp
.Vb 2
\& # this comment is not indented              (-nibc)
\&             if ($task) { yyy(); }
.Ve
See also \fB\-sbc\fR for a way to have some indented and some outdented
block comments.
.Ip "\fB\-olc\fR, \fB\*(--outdent-long-comments\fR" 4
.IX Item "-olc, outdent-long-comments"
When \fB\-olc\fR is set, lines which are full-line (block) comments longer
than the value \fBmaximum-line-length\fR will have their indentation
removed.  The default is not to do this.  
.Ip "\fB\-msc=n\fR,  \fB\*(--minimum-space-to-comment=n\fR" 4
.IX Item "-msc=n,  minimum-space-to-comment=n"
Side comments look best when lined up several spaces to the right of
code.  Perltidy will try to keep comments at least n spaces to the
right.  The default is n=4 spaces.
.Ip "\fB\-hsc\fR, \fB\*(--hanging-side-comments\fR" 4
.IX Item "-hsc, hanging-side-comments"
By default, perltidy tries to identify and align \*(L"hanging side
comments\*(R", which are something like this:
.Sp
.Vb 3
\&        my $IGNORE = 0;    # This is a side comment
\&                           # This is a hanging side comment
\&                           # And so is this
.Ve
A comment is considered to be a hanging side comment if (1) it immediately
follows a line with a side comment, or another hanging side comment, and
(2) there is some leading whitespace on the line.
To deactivate this feature, use \fB\-nhsc\fR or \fB\*(--nohanging-side-comments\fR.  
If block comments are preceded by a blank line, or have no leading
whitespace, they will not be mistaken as hanging side comments.
.Ip "Closing Side Comments" 4
.IX Item "Closing Side Comments"
A closing side comment is a special comment which perltidy can
automatically create and place after the closing brace of a code block.
They can be useful for code maintenance and debugging.  The command
\&\fB\-csc\fR (or \fB\-closing-side-comments\fR) adds or refreshes closing side
comments (but not if a different type of side comment exists).  For
example, here is a small code snippet
.Sp
.Vb 8
\&        sub foo {
\&            if ( !defined( $_[0] ) ) {
\&                print("Hello, World\en");
\&            }
\&            else {
\&                print( $_[0], "\en" );
\&            }
\&        }
.Ve
And here is the result of processing with \f(CW\*(C`perltidy \-csc\*(C'\fR:
.Sp
.Vb 8
\&        sub foo {
\&            if ( !defined( $_[0] ) ) {
\&                print("Hello, World\en");
\&            }
\&            else {
\&                print( $_[0], "\en" );
\&            }
\&        } ## end sub foo
.Ve
A closing side comment was added for \f(CW\*(C`sub foo\*(C'\fR in this case, but not
for the \f(CW\*(C`if\*(C'\fR and \f(CW\*(C`else\*(C'\fR blocks, because they were below the 6 line
cutoff limit for adding closing side comments.  This limit may be
changed with the \fB\-csci\fR command, described below.
.Sp
The command \fB\-dcsc\fR (or \fB\*(--delete-closing-side-comments\fR) reverses this 
process and removes these comments.
.Sp
Three commands modify the behavior of \fB\-csc\fR and \fB\-dcsc\fR:
.Sp
\&\fB\s-1NOTE:\s0\fR If you edit the closing side comments generated by perltidy,
your edits will probably be lost when you rerun perltidy with \fB\-csc\fR.
You could, however, change the leading pattern (say, to a single '#'
instead of '##') to prevent perltidy from recognizing and changing the
side comment.
.RS 4
.Ip "\fB\-csci=n\fR, or \fB\-closing-side-comment-interval=n\fR" 4
.IX Item "-csci=n, or -closing-side-comment-interval=n"
where \f(CW\*(C`n\*(C'\fR is the minimum number of lines that a block must have in
order for a closing side comment to be added.  The default value is
\&\f(CW\*(C`n=6\*(C'\fR.  To illustrate, here is the above block processed with
\&\f(CW\*(C`\-csci=2 \-csc\*(C'\fR:
.Sp
.Vb 8
\&        sub foo {
\&            if ( !defined( $_[0] ) ) {
\&                print("Hello, World\en");
\&            } ## end if ( !defined( $_[0] )...
\&            else {
\&                print( $_[0], "\en" );
\&            } ## end else
\&        } ## end sub foo
.Ve
Now the \f(CW\*(C`if\*(C'\fR and \f(CW\*(C`else\*(C'\fR blocks are commented.  However, now this has
become very cluttered.
.Ip "\fB\-cscp=string\fR, or \fB\-closing-side-comment-prefix=string\fR" 4
.IX Item "-cscp=string, or -closing-side-comment-prefix=string"
where string is the prefix used before the name of the block type.  The
default prefix, shown above, is \f(CW\*(C`## end\*(C'\fR.  This string will be added
to closing side comments, and it will also be used to recognize them
in order to update, delete, and format them.  Any comment
identified as a closing side comment will be placed just a single
space to the right of its closing brace.
.Ip "\fB\-cscl=string\fR, or \fB\-closing-side-comment-list-string\fR" 4
.IX Item "-cscl=string, or -closing-side-comment-list-string"
where \f(CW\*(C`string\*(C'\fR is a list of block types to be tagged with closing side
comments.  By default, all block types preceded by a keyword or label
(such as \f(CW\*(C`if\*(C'\fR, \f(CW\*(C`sub\*(C'\fR, and so on) will be tagged.  The \fB\-cscl\fR command
changes the default list to be any selected block types.  To request
that a block with a label be included, include a bare colon, \f(CW\*(C`:\*(C'\fR, in
the list of block types.  For example, the following command requests
that only \f(CW\*(C`sub\*(C'\fR's, labels, \f(CW\*(C`BEGIN\*(C'\fR, and \f(CW\*(C`END\*(C'\fR blocks be affected by
any \fB\-csc\fR or \fB\-dcsc\fR operation:
.Sp
.Vb 1
\&   -cscl="sub : BEGIN END"
.Ve
.RE
.RS 4
.Sp
Please note that the adding or deleting of closing side comments take
place only through the commands \f(CW\*(C`\-csc\*(C'\fR or \f(CW\*(C`\-dcsc\*(C'\fR.  The other commands,
if used, merely modify the behavior of these two commands.  
.Sp
Also, note that if \fB\-csc\fR is used, it should continue to be used so that
the closing side comments are kept up to date as code changes.
.RE
.Ip "Static Block Comments" 4
.IX Item "Static Block Comments"
.RS 4
.PD 0
.Ip "\fB\-sbc\fR, \fB\*(--static-block-comments\fR" 4
.IX Item "-sbc, static-block-comments"
.PD
When \fB\-sbc\fR is used, a block comment with a special leading pattern, \f(CW\*(C`##\*(C'\fR by
default, will be treated specially, and will effectively behave as if it had
glue along its left and top edges.  This option is useful for controlling how
commented code is displayed.
.Sp
Comments so identified  are treated as follows: 
.RS 4
.Ip "\(bu" 4
If there is no leading space on the line, then the comment will not
be indented, and otherwise it may be, 
.Ip "\(bu" 4
no new blank line will be
inserted before such a comment, and 
.Ip "\(bu" 4
such a comment will never become
a hanging side comment.  
.RE
.RS 4
.Sp
For example, assuming \f(CW\*(C`@month_of_year\*(C'\fR is
left-adjusted:
.Sp
.Vb 4
\&    @month_of_year = (    # -sbc (default)
\&        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',
\&    ##  'Dec', 'Nov'
\&        'Nov', 'Dec');
.Ve
Without this convention, the above code would become
.Sp
.Vb 2
\&    @month_of_year = (   # -nsbc
\&        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',
.Ve
.Vb 3
\&        ##  'Dec', 'Nov'
\&        'Nov', 'Dec'
\&    );
.Ve
which is not as clear.
The default is to use \fB\-sbc\fR.  This may be deactivated with \fB\-nsbc\fR.
.RE
.Ip "\fB\-sbcp=string\fR, \fB\*(--static-block-comment-prefix=string\fR" 4
.IX Item "-sbcp=string, static-block-comment-prefix=string"
This parameter defines the prefix used to identify static block comments
when the \fB\-sbc\fR parameter is set.  The default prefix is \f(CW\*(C`##\*(C'\fR,
corresponding to \f(CW\*(C`\-sbcp=##\*(C'\fR.  The first character must be a \f(CW\*(C`#\*(C'\fR
symbol, since this must only match comments.  As a simple example, to
identify all comments as static block comments, one would use \f(CW\*(C`\-sbcp=#\*(C'\fR.
.Sp
Please note that \fB\-sbcp\fR merely defines the pattern used to identify static
block comments; it will not be used unless the switch \fB\-sbc\fR is set.  Also,
please be aware that this string is used in a perl regular expression which
identifies these comments, so it must enable a valid regular expression to be
formed.
.RE
.RS 4
.RE
.Ip "Static Side Comments" 4
.IX Item "Static Side Comments"
.RS 4
.PD 0
.Ip "\fB\-ssc\fR, \fB\*(--static-side-comments\fR" 4
.IX Item "-ssc, static-side-comments"
.PD
When \fB\-ssc\fR is used, a side comment with a static leading pattern, which is
\&\f(CW\*(C`##\*(C'\fR by default, will be be spaced only a single space from previous
character, and it will not be vertically aligned with other side comments.
This option can be useful for controlling how commented code is displayed
when it is a side comment.
.Sp
The default is \fB\-nssc\fR.
.Ip "\fB\-sscp=string\fR, \fB\*(--static-side-comment-prefix=string\fR" 4
.IX Item "-sscp=string, static-side-comment-prefix=string"
This parameter defines the prefix used to identify static side comments
when the \fB\-ssc\fR parameter is set.  The default prefix is \f(CW\*(C`##\*(C'\fR,
corresponding to \f(CW\*(C`\-sscp=##\*(C'\fR.  
.Sp
Please note that \fB\-sscp\fR merely defines the pattern used to identify
static side comments; it will not be used unless the switch \fB\-ssc\fR is
set.  Also, note that this string is used in a perl regular expression
which identifies these comments, so it must enable a valid regular
expression to be formed.
.RE
.RS 4
.RE
.Sh "Line Break Control"
.IX Subsection "Line Break Control"
.Ip "\fB\-fnl\fR,  \fB\*(--freeze-newlines\fR" 4
.IX Item "-fnl,  freeze-newlines"
If you do not want any changes to the line breaks in your script, set \fB\-fnl\fR,
and they will remain fixed, and the rest of the commands in this section and
the Blank Line Control section will be ignored.  You may want to use \fB\-noll\fR
with this.
.Ip "\fB\-ce\fR,   \fB\*(--cuddled-else\fR" 4
.IX Item "-ce,   cuddled-else"
Enable the \*(L"cuddled else\*(R" style, in which \f(CW\*(C`else\*(C'\fR and \f(CW\*(C`elsif\*(C'\fR are
follow immediately after the curly brace closing the previous block.
The default is not to use cuddled elses, and is indicated with the flag
\&\fB\-nce\fR or \fB\*(--nocuddled-else\fR.  Here is a comparison of the
alternatives:
.Sp
.Vb 5
\&  if ($task) {
\&      yyy();
\&  } else {    # -ce
\&      zzz();
\&  }
.Ve
.Vb 6
\&  if ($task) {
\&        yyy();
\&  }
\&  else {    # -nce  (default)
\&        zzz();
\&  }
.Ve
.Ip "\fB\-bl\fR,    \fB\*(--opening-brace-on-new-line\fR" 4
.IX Item "-bl,    opening-brace-on-new-line"
Use the flag \fB\-bl\fR to place the opening brace on a new line:
.Sp
.Vb 4
\&  if ( $input_file eq '-' )    # -bl 
\&  {                          
\&      important_function();
\&  }
.Ve
This flag applies to all structural blocks, including sub's (unless
the \fB\-sbl\fR flag is set \*(-- see next item).
.Sp
The default style, \fB\-nbl\fR, places an opening brace on the same line as
the keyword introducing it.  For example,
.Sp
.Vb 1
\&  if ( $input_file eq '-' ) {   # -nbl (default)
.Ve
.Ip "\fB\-sbl\fR,    \fB\*(--opening-sub-brace-on-new-line\fR" 4
.IX Item "-sbl,    opening-sub-brace-on-new-line"
The flag \fB\-sbl\fR can be used to override the value of \fB\-bl\fR for
opening sub braces.  For example, 
.Sp
.Vb 1
\& perltidy -sbl
.Ve
produces this result:
.Sp
.Vb 9
\& sub foo
\& {
\&    if (!defined($_[0])) {
\&        print("Hello, World\en");
\&    }
\&    else {
\&        print($_[0], "\en");
\&    }
\& }
.Ve
This flag is negated with \fB\-nsbl\fR.  If \fB\-sbl\fR is not specified,
the value of \fB\-bl\fR is used.
.Ip "\fB\-bli\fR,    \fB\*(--brace-left-and-indent\fR" 4
.IX Item "-bli,    brace-left-and-indent"
The flag \fB\-bli\fR is the same as \fB\-bl\fR but in addition it causes one 
unit of continuation indentation ( see \fB\-ci\fR ) to be placed before 
an opening and closing brace associated with the keywords 
\&\fBif\fR, \fBelsif\fR, \fBelse\fR, \fBunless\fR, \fBfor\fR, \fBforeach\fR, \fBsub\fR, 
\&\fBwhile\fR, \fBuntil\fR, and also with a preceding label.  
.Sp
For example,
.Sp
.Vb 4
\&        if ( $input_file eq '-' )    # -bli
\&          {
\&            important_function();
\&          }
.Ve
.Ip "\fB\-bar\fR,    \fB\*(--opening-brace-always-on-right\fR" 4
.IX Item "-bar,    opening-brace-always-on-right"
The default style, \fB\-nbl\fR places the opening brace on a new
line if it does not fit on the same line as the opening keyword, like
this:
.Sp
.Vb 5
\&        if ( $bigwasteofspace1 && $bigwasteofspace2
\&          || $bigwasteofspace3 && $bigwasteofspace4 )
\&        {
\&            big_waste_of_time();
\&        }
.Ve
To force the opening brace to always be on the right, use the \fB\-bar\fR
flag.  In this case, the above example becomes
.Sp
.Vb 4
\&        if ( $bigwasteofspace1 && $bigwasteofspace2
\&          || $bigwasteofspace3 && $bigwasteofspace4 ) {
\&            big_waste_of_time();
\&        }
.Ve
A conflict occurs if both \fB\-bl\fR and \fB\-bar\fR are specified.
.Ip "\fB\-dnl\fR,  \fB\*(--delete-old-newlines\fR" 4
.IX Item "-dnl,  delete-old-newlines"
By default, perltidy first deletes all old line break locations, and then it
looks for good break points to match the desired line length.  Use \fB\-ndnl\fR
or  \fB\*(--nodelete-old-newlines\fR to force perltidy to retain all old line break
points.  
.Ip "\fB\-anl\fR,  \fB\*(--add-newlines\fR" 4
.IX Item "-anl,  add-newlines"
By default, perltidy will add line breaks when necessary to create
continuations of long lines and to improve the script appearance.  Use
\&\fB\-nanl\fR or \fB\-noadd-newlines\fR to prevent any new line breaks.  
.Sp
This flag does not prevent perltidy from eliminating existing line
breaks; see \fB\-freeze-newlines\fR to completely prevent changes to line
break points.
.Ip "Controlling whether perltidy breaks before or after operators" 4
.IX Item "Controlling whether perltidy breaks before or after operators"
Two command line parameters provide some control over whether
a line break should be before or after specific token types.
.Sp
\&\fB\-wba=s\fR or \fB\*(--want-break-after=s\fR, and
.Sp
\&\fB\-wbb=s\fR or \fB\*(--want-break-before=s\fR.
.Sp
These parameters are each followed by a quoted string, \fBs\fR, containing
a list of token types (separated only by spaces).  No more than one of each
of these parameters should be specified, because repeating a
command-line parameter always overwrites the previous one before
perltidy ever sees it.
.Sp
By default, perltidy breaks \fBafter\fR these token types:
  % + \- * / x != == >= <= =~ !~ < >  | & >= <
  = **= += *= &= <<= &&= \-= /= |= >>= ||= .= %= ^= x=
.Sp
And perltidy breaks \fBbefore\fR these token types by default:
  . << >> \-> && ||
.Sp
To illustrate, to cause a break after a concatenation operator, \f(CW\*(C`'.'\*(C'\fR,
rather than before it, the command line would be
.Sp
.Vb 1
\&  -wba="."
.Ve
As another example, the following command would cause a break before 
math operators \f(CW\*(C`'+'\*(C'\fR, \f(CW\*(C`'\-'\*(C'\fR, \f(CW\*(C`'/'\*(C'\fR, and \f(CW\*(C`'*'\*(C'\fR:
.Sp
.Vb 1
\&  -wbb="+ - / *"
.Ve
These commands should work well for most of the token types that
perltidy uses (use \fB\*(--dump-token-types\fR for a list).  However, 
for a few token types there may be conflicts with hardwired
logic which cause unexpected results.  An example is the comma,
which is hardwired to go at the end of lines in certain cases.
Hopefully, this restriction will be removed in the future.  Another
example is curly braces, which should be controlled with the
parameter \fBbl\fR provided for that purpose.
.Sh "Blank Line Control"
.IX Subsection "Blank Line Control"
Blank lines can improve the readability of a script if they are carefully
placed.  Perltidy has several commands for controlling the insertion,
retention, and removal of blank lines.
.Ip "\fB\-bbc\fR,  \fB\*(--blanks-before-comments\fR" 4
.IX Item "-bbc,  blanks-before-comments"
A blank line will be introduced before a full-line comment.  This is the
default.  Use \fB\-nbbc\fR or  \fB\*(--noblanks-before-comments\fR to prevent
such blank lines from being introduced.
.Ip "\fB\-bbs\fR,  \fB\*(--blanks-before-subs\fR" 4
.IX Item "-bbs,  blanks-before-subs"
A blank line will be introduced before a \fBsub\fR definition, unless it is a
one-liner or preceded by a comment.  A blank line will also be introduced
before a \fBpackage\fR statement and a \fB\s-1BEGIN\s0\fR and \fB\s-1END\s0\fR block.  This is the
default.  The intention is to help display the structure of a program by
setting off certain key sections of code.  This is negated with \fB\-nbbs\fR or
\&\fB\*(--noblanks-before-subs\fR.  
.Ip "\fB\-bbb\fR,  \fB\*(--blanks-before-blocks\fR" 4
.IX Item "-bbb,  blanks-before-blocks"
A blank line will be introduced before blocks of coding delimited by
\&\fBfor\fR, \fBforeach\fR, \fBwhile\fR, \fBuntil\fR, and \fBif\fR, \fBunless\fR, in the following
circumstances:
.RS 4
.Ip "\(bu" 4
The block is not preceded by a comment.
.Ip "\(bu" 4
The block is not a one-line block.
.Ip "\(bu" 4
The number of consecutive non-blank lines at the current indentation depth is at least \fB\-lbl\fR
(see next section).
.RE
.RS 4
.Sp
This is the default.  The intention of this option is to introduce
some space within dense coding.
This is negated with \fB\-nbbb\fR or  \fB\*(--noblanks-before-blocks\fR.
.RE
.Ip "\fB\-lbl=n\fR \fB\*(--long-block-line-count=n\fR" 4
.IX Item "-lbl=n long-block-line-count=n"
This controls how often perltidy is allowed to add blank lines before 
certain block types (see previous section).  The default is 8.  Entering
a value of \fB0\fR is equivalent to entering a very large number.
.Ip "\fB\-mbl=n\fR \fB\*(--maximum-consecutive-blank-lines=n\fR" 4
.IX Item "-mbl=n maximum-consecutive-blank-lines=n"
This parameter specifies the maximum number of consecutive blank lines
in the output script.  The default is n=1.  If the input file has more
than n consecutive blank lines, the number will be reduced to n.
.Ip "\fB\-sob\fR,  \fB\*(--swallow-optional-blank-lines\fR" 4
.IX Item "-sob,  swallow-optional-blank-lines"
All blank lines not required by the above flags, \fB\-bbb\fR, \fB\-bbs\fR, and \fB\-bbc\fR,
will be deleted.  (But essential blank lines above pod documents will be
retained).  This is \s-1NOT\s0 the default.
.Ip "\fB\-nsob\fR,  \fB\*(--noswallow-optional-blank-lines\fR" 4
.IX Item "-nsob,  noswallow-optional-blank-lines"
Retain blank lines, including those which do not corresponding to flags
\&\fB\-bbb\fR, \fB\-bbs\fR, and \fB\-bbc\fR.  This is the default.  The number of
blanks retained is subject to the limit imposed by
\&\fB\*(--maximum-consecutive-blank-lines\fR, however.
.Sh "Styles"
.IX Subsection "Styles"
.Ip "\fB\-gnu\fR, \fB\*(--gnu-style\fR" 4
.IX Item "-gnu, gnu-style"
\&\fB\-gnu\fR gives an approximation to the \s-1GNU\s0 Coding Standards (which do
not apply to perl) as they are sometimes implemented.  At present, this
style overrides the default style with the following parameters:
.Sp
.Vb 1
\&    -lp -bl -noll -pt=2 -bt=2 -sbt=2 -icp
.Ve
.Sh "Other Controls"
.IX Subsection "Other Controls"
.Ip "Deleting selected text" 4
.IX Item "Deleting selected text"
Perltidy can selectively delete comments and/or pod documentation.  The
command \fB\-dac\fR or  \fB\*(--delete-all-comments\fR will delete all comments
\&\fBand\fR all pod documentation, leaving just code and any leading system
control lines.
.Sp
The command \fB\-dp\fR or \fB\*(--delete-pod\fR will remove all pod documentation
(but not comments).
.Sp
Two commands which remove comments (but not pod) are: \fB\-dbc\fR or
\&\fB\*(--delete-block-comments\fR and \fB\-dsc\fR or  \fB\*(--delete-side-comments\fR.
(Hanging side comments will be deleted with block comments here.)
.Sp
The negatives of these commands also work, and are the defaults.  When
block comments are deleted, any leading 'hash-bang' will be retained.
Also, if the \fB\-x\fR flag is used, any system commands before a leading
hash-bang will be retained (even if they are in the form of comments).
.Ip "Writing selected text to a file" 4
.IX Item "Writing selected text to a file"
When perltidy writes a formatted text file, it has the ability to also
send selected text to a file with a \fI.TEE\fR extension.  This text can
include comments and pod documentation.  
.Sp
The command \fB\-tac\fR or  \fB\*(--tee-all-comments\fR will write all comments
\&\fBand\fR all pod documentation.
.Sp
The command \fB\-tp\fR or \fB\*(--tee-pod\fR will write all pod documentation (but
not comments).
.Sp
The commands which write comments (but not pod) are: \fB\-tbc\fR or
\&\fB\*(--tee-block-comments\fR and \fB\-tsc\fR or  \fB\*(--tee-side-comments\fR.
(Hanging side comments will be written with block comments here.)
.Sp
The negatives of these commands also work, and are the defaults.  
.Ip "Using a \fI.perltidyrc\fR command file" 4
.IX Item "Using a .perltidyrc command file"
If you use perltidy frequently, you probably won't be happy until you
create a \fI.perltidyrc\fR file to avoid typing commonly-used
parameters.  Perltidy will first look in your current directory for a
command file named \fI.perltidyrc\fR, and if it does not find one, it will
look in your home directory.  If it does not find one there, it will
look for a system-wide file \fI/usr/local/etc/perltidyrc\fR, and failing to
find one there it will look for \fI/etc/perltidyrc\fR.  Note that the
system-wide files do not have a leading dot.
.Sp
This file is free format, and simply a list of parameters, just as they
would be entered on a command line.  Any number of lines may be used,
with any number of parameters per line, although it may be easiest to
read with one parameter per line.  Blank lines are ignored, and text
after a '#' is ignored to the end of a line.
.Sp
Here is an example of a \fI.perltidyrc\fR file:
.Sp
.Vb 8
\&  # This is a simple of a .perltidyrc configuration file
\&  # This implements a highly spaced style
\&  -se    # errors to standard error output
\&  -w     # show all warnings
\&  -bl    # braces on new lines
\&  -pt=0  # parens not tight at all
\&  -bt=0  # braces not tight
\&  -sbt=0 # square brackets not tight
.Ve
The parameters in the \fI.perltidyrc\fR file are installed first, so any
parameters given on the command line will have priority over them.  
.Sp
To avoid confusion, perltidy ignores any command in the .perltidyrc
file which would cause some kind of dump and an exit.  These are:
.Sp
.Vb 1
\& -h -v -ddf -dln -dop -dsn -dtt -dwls -dwrs -ss
.Ve
There are several options may be helpful in debugging a \fI.perltidyrc\fR
file:  (1) \fB\-log\fR will force a \fI.LOG\fR file to be written, which
contains the path to the \fI.perltidyrc\fR file, if any, and a listing of
its parameter settings.  (2) \fB\-opt\fR will force a \fI.LOG\fR file to be
written with a complete listing of all option flags in use for a run,
taking into account the default settings, the \fI.perltidyrc\fR file, plus
any command line options.  (3) the parameters in the \fI.perltidyrc\fR
file can be ignored with the \fB\-npro\fR option.  (4) the
commands \fB\-dump-options\fR, \fB\-dump-defaults\fR, \fB\-dump-long-names\fR,
and \fB\-dump-short-names\fR, all described below, may all be helpful.
(5) It may be simplest to develop and test configuration files
with alternative names, and invoke them with \fB\-pro=filename\fR on
the command line.  Then rename the desired file to \fI.perltidyrc\fR 
when finished.
.Ip "Creating a new abbreviation" 4
.IX Item "Creating a new abbreviation"
A special notation is available for use in a \fI.perltidyrc\fR file
for creating an abbreviation for a group
of options.  This can be used to create a
shorthand for one or more styles which are frequently, but not always,
used.  The notation is to group the options within curly braces which
are preceded by the name of the alias (without leading dashes), like this:
.Sp
.Vb 4
\&        newword {
\&        -opt1
\&        -opt2
\&        }
.Ve
where \fBnewword\fR is the abbreviation, and \fBopt1\fR, etc, are existing parameters
\&\fIor other abbreviations\fR.  The main syntax requirement is that
the new abbreviation must begin on a new line.
Space before and after the curly braces is optional.
For a
specific example, the following line
.Sp
.Vb 1
\&        airy {-bl -pt=0 -bt=0 -sbt=0}
.Ve
could be placed in a \fI.perltidyrc\fR file, and then invoked at will with
.Sp
.Vb 1
\&        perltidy -airy somefile.pl
.Ve
(Either \f(CW\*(C`\-airy\*(C'\fR or \f(CW\*(C`\-\-airy\*(C'\fR may be used).
.Ip "Skipping leading non-perl commands with \fB\-x\fR or \fB\*(--look-for-hash-bang\fR" 4
.IX Item "Skipping leading non-perl commands with -x or look-for-hash-bang"
If your script has leading lines of system commands or other text which
are not valid perl code, and which are separated from the start of the
perl code by a \*(L"hash-bang\*(R" line, ( a line of the form \f(CW\*(C`#!...perl\*(C'\fR ),
you must use the \fB\-x\fR flag to tell perltidy not to parse and format any
lines before the \*(L"hash-bang\*(R" line.  This option also invokes perl with a
\&\-x flag when checking the syntax.  This option was originally added to
allow perltidy to parse interactive \s-1VMS\s0 scripts, but it should be used
for any script which is normally invoked with \f(CW\*(C`perl \-x\*(C'\fR.
.Ip "Controlling list formatting and vertical alignment" 4
.IX Item "Controlling list formatting and vertical alignment"
Perltidy attempts to place comma-separated arrays of values 
in tables which can be vertically aligned.  The number of
fields is, by default, chosen to be the largest even number which
fits in the current page width (defined by \fB\-l=n\fR).  Usually this
works well.
.Sp
There are two ways to control this formatting.  The first is with the
use of comments or empty lines.  If there are any comments or blank
lines between the opening and closing structural brace, parenthesis, or
bracket containing the list, then the original line breaks will be used
for the entire list instead.
.Sp
The second is with the parameter \fB\*(--mft=n\fR or
\&\fB\*(--maximum-fields-per-table=n\fR.  The default value for \fBn\fR is a large
number, 40.  If the computed number of fields for any table exceeds
\&\fBn\fR, then it will be reduced to \fBn\fR.  While this value should probably
be left unchanged as a general rule, it might be used on a small section
of code to force a list to have a particular number of fields per line,
and then a single comment could be introduced somewhere to freeze the
formatting in future applications of perltidy, like this:
.Sp
.Vb 8
\&    @month_of_year = (    # -mft=2
\&        'Jan', 'Feb',
\&        'Mar', 'Apr',
\&        'May', 'Jun',
\&        'Jul', 'Aug',
\&        'Sep', 'Oct',
\&        'Nov', 'Dec'
\&    );
.Ve
Vertical alignment refers to lining up similar tokens vertically, like
this:
.Sp
.Vb 3
\& my $lines     = 0;    # checksum: #lines
\& my $bytes     = 0;    # checksum: #bytes
\& my $sum       = 0;    # checksum: system V sum
.Ve
Once the perltidy vertical aligner \*(L"locks on\*(R" to a pattern, such as
defined by the \*(L"=\*(R" and \*(L"#\*(R" in the above example, it retains the pattern
for as long as possible.  However, a blank line or full-line comment
will cause it to forget the pattern and start looking for another.
Thus, a single blank line can be introduced to force the aligner to stop
aligning when it is undesirable.
.Ip "Making a file unreadable" 4
.IX Item "Making a file unreadable"
The goal of perltidy is to improve the readability of files, but there
are two commands which have the opposite effect, \fB\*(--mangle\fR and
\&\fB\*(--extrude\fR.  They are actually
merely aliases for combinations of other parameters.  Both of these
strip all possible whitespace, but leave comments and pod documents,
so that they are essentially reversible.  The
difference between these is that \fB\*(--mangle\fR puts the fewest possible
line breaks in a script while \fB\*(--extrude\fR puts the maximum possible.
Note that these options do not provided any meaningful obfuscation, because
perltidy can be used to reformat the files.  
A useful application of \fB\*(--mangle\fR is the following:
.Sp
.Vb 1
\&  perltidy -mangle myfile.pl -st | perltidy -o myfile.pl.new
.Ve
This will form the maximum possible number of one-line blocks (see next
section), and can sometimes help clean up a badly formatted script.
.Ip "One-line blocks" 4
.IX Item "One-line blocks"
There are a few points to note regarding one-line blocks.  A one-line
block is something like this,
.Sp
.Vb 1
\&        if ($x > 0) { $y = 1 / $x }
.Ve
where the contents within the curly braces is short enough to fit
on a single line.
.Sp
With few exceptions, Perltidy retains existing one-line blocks, if it
is possible within the line-length constraint, but it does not attempt
to form new ones.  In other words, Perltidy will try to follow the
one-line block style of the input file.
.Sp
If an existing one-line block is longer than the maximum line length,
however, it will be broken into multiple lines.  When this happens, perltidy
checks for and adds any optional terminating semicolon (unless the \fB\-nasc\fR
option is used) if the block is a code block.  
.Sp
The main exception is that Perltidy will attempt to form new one-line
blocks following the keywords \f(CW\*(C`map\*(C'\fR, \f(CW\*(C`eval\*(C'\fR, and \f(CW\*(C`sort\*(C'\fR, because
these code blocks are often small and most clearly displayed in a single
line.
.Sp
Occasionally it is helpful to introduce line breaks in lists containing
a '=>' symbol, which is sometimes called a \*(L"comma-arrow\*(R".  To force
perltidy to introduce breaks in a one-line block containing comma
arrows, use the \fB\*(--break-after-comma-arrows\fR, or \fB\-baa\fR, flag.  For
example, given the following single line, Perltidy will not add any line
breaks:
.Sp
.Vb 1
\&    bless { B => $B, Root => $Root } => $package;   -nbaa (default)
.Ve
To introduce breaks to show the structure, use \fB\-baa\fR:
.Sp
.Vb 4
\&    bless {                                         -baa
\&        B    => $B,
\&        Root => $Root
\&    } => $package;
.Ve
One-line block rules can conflict with the cuddled-else option.  When
the cuddled-else option is used, perltidy retains existing one-line
blocks, even if they do not obey cuddled-else formatting.
.Sp
Occasionally, when one-line blocks get broken because they exceed the
available line length, the formatting will violate the requested brace style.
If this happens, reformatting the script a second time should correct
the problem.
.Ip "Debugging" 4
.IX Item "Debugging"
The following flags are available for debugging:
.Sp
\&\fB\*(--dump-defaults\fR or \fB\-ddf\fR will write the default option set to standard output and quit
.Sp
\&\fB\*(--dump-options\fR or \fB\-dop\fR  will write current option set to standard output and quit.
.Sp
\&\fB\*(--dump-long-names\fR or \fB\-dln\fR  will write all command line long names (passed 
to Get_options) to standard output and quit.
.Sp
\&\fB\*(--dump-short-names\fR  or \fB\-dsn\fR will write all command line short names 
to standard output and quit.
.Sp
\&\fB\*(--dump-token-types\fR or \fB\-dtt\fR  will write a list of all token types 
to standard output and quit.
.Sp
\&\fB\*(--dump-want-left-space\fR or \fB\-dwls\fR  will write the hash \f(CW%want_left_space\fR
to standard output and quit.  See the section on controlling whitespace
around tokens.
.Sp
\&\fB\*(--dump-want-right-space\fR or \fB\-dwrs\fR  will write the hash \f(CW%want_right_space\fR
to standard output and quit.  See the section on controlling whitespace
around tokens.
.Sp
\&\fB\-DEBUG\fR  will write a file with extension \fI.DEBUG\fR for each input file 
showing the tokenization of all lines of code.
.Ip "Working with MakeMaker, AutoLoader and SelfLoader" 4
.IX Item "Working with MakeMaker, AutoLoader and SelfLoader"
The first \f(CW$VERSION\fR line of a file which might be eval'd by MakeMaker
is passed through unchanged except for indentation.  
Use \fB\*(--nopass-version-line\fR, or \fB\-npvl\fR, to deactivate this feature.
.Sp
If the AutoLoader module is used, perltidy will continue formatting
code after seeing an _\|_END_\|_ line.
Use \fB\*(--nolook-for-autoloader\fR, or \fB\-nlal\fR, to deactivate this feature.
.Sp
Likewise, if the SelfLoader module is used, perltidy will continue formatting
code after seeing a _\|_DATA_\|_ line.
Use \fB\*(--nolook-for-selfloader\fR, or \fB\-nlsl\fR, to deactivate this feature.
.Ip "Writing an \s-1HTML\s0 file" 4
.IX Item "Writing an HTML file"
The flag \fB\-html\fR causes perltidy to write an html file with extension
\&\fI.html\fR.  
So, for example, the following command
.Sp
.Vb 1
\&        perltidy -html somefile.pl
.Ve
will produce a syntax-colored html file named \fIsomefile.pl.html\fR
which may be viewed with a browser.
.Sp
Documentation for this option has been moved to a separate man
page, \fIperl2web\fR\|(1).
.SH "SWITCHES WHICH MAY BE NEGATED"
.IX Header "SWITCHES WHICH MAY BE NEGATED"
The following list shows all short parameter names which allow a prefix
\&'n' to produce the negated form:
.PP
.Vb 4
\&    D anl asc aws bbb bbc bbs bli baa syn ce csc dac dbc dcsc dnl
\&    dws dp dsm dsc ddf dln dop dsn dtt dwls dwrs f fll
\&    hsc html ibc icb icp lp log lal x lsl bl sbl okw ola oll pvl
\&    q opt sbc sfs ssc sts se st sob t tac tbc tp tsc tqw w
.Ve
Equivalently, the prefix 'no' on the corresponding long names may be
used.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
.Ip "Parsing Limitations" 4
.IX Item "Parsing Limitations"
Perltidy should work properly on most perl scripts.  It does a lot of
self-checking, but still, it is possible that an error could be
introduced and go undetected.  Therefore, it is essential to make
careful backups and to test reformatted scripts.
.Sp
The main current limitation is that perltidy does not scan modules
included with 'use' statements.  This makes it necessary to guess the
context of any bare words introduced by such modules.  Perltidy has good
guessing algorithms, but they are not infallible.  When it must guess,
it leaves a message in the log file.
.Sp
If you encounter a bug, please report it.
.Ip "What perltidy does not parse and format" 4
.IX Item "What perltidy does not parse and format"
Perltidy indents but does not reformat comments and \f(CW\*(C`qw\*(C'\fR quotes. 
Perltidy does not in any way modify the contents of here documents or
quoted text, even if they contain source code.  (You could, however,
reformat them separately).  Perltidy does not format 'format' sections
in any way.  And, of course, it does not modify pod documents.
.SH "FILES"
.IX Header "FILES"
.Ip "Special files when standard input or standard output are used" 4
.IX Item "Special files when standard input or standard output are used"
When standard input is used, the log file, if saved, is \fIperltidy.LOG\fR,
and any errors are written to \fIperltidy.ERR\fR unless the \fB\-se\fR flag is
set.  These are saved in the current working directory.  If syntax
checking is used, a temporary copy of the input file will be created in
the current working directory called \fIperltidy.TMPI\fR, but it will be
removed when perltidy finishes.
.Sp
When standard output and syntax checking are used, a temporary copy of the
output file will be created in the current working directory called
\&\fIperltidy.TMPO\fR.  It will be removed when perltidy finishes.
.Ip "Files overwritten" 4
.IX Item "Files overwritten"
The following file extensions are used by perltidy, and files with these
extensions may be overwritten or deleted: \fI.tdy\fR, \fI.ERR\fR, \fI.LOG\fR, \fI.TEE\fR,
\&\fI.TMPI\fR, \fI.TMPO\fR.
.Ip "Files extensions limitations" 4
.IX Item "Files extensions limitations"
Perltidy does not operate on files for which the run could produce a file with
a duplicated file extension.  These extensions are \fI.tdy\fR, \fI.LOG\fR, \fI.ERR\fR,
\&\fI.TEE\fR, \fI.TMPI\fR, \fI.TMPO\fR.  The purpose of this rule is to prevent generating
confusing filenames such as \fIsomefile.tdy.tdy.tdy\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl2web\fR\|(1), \fIperlstyle\fR\|(1)
.SH "VERSION"
.IX Header "VERSION"
This man page documents perltidy version 20011119.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&  Steven L. Hancock
\&  email: perltidy at users.sourceforge.net
\&  http://perltidy.sourceforge.net
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2000, 2001 by Steven L. Hancock
.SH "LICENSE"
.IX Header "LICENSE"
This package is free software; you can redistribute it and/or modify it
under the terms of the \*(L"\s-1GNU\s0 General Public License\*(R".
.PP
Please refer to the file \*(L"\s-1COPYING\s0\*(R" for details.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This package is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
.PP
See the \*(L"\s-1GNU\s0 General Public License\*(R" for more details.
