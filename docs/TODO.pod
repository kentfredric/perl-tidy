=head1 Perltidy TODO List

This is a "wish-list" of features to add and things to do.  All of these
are of interest, but there is no particular schedule for implementing
them.  

=head2 XML Output

A -xml option is being tested.  This will allow the creation of simple
utilities to reliably manipulate perl code.

=head2 Fix numerous little formatting issues

There is, and always will be, a large number of relatively minor
formatting issues that need to be addressed.  I'm working on them as
time permits.  The most interesting have to do with automatically
formatting lists.

=head2 BUGS

There are still a couple of bugs listed in the BUGS file that need
to be fixed.  These are low priority compared to formatting
issues, but need to be done.

=head2 improved ?: formatting

An indentation level will be associated with ?: statements.
This will make nested ?: statements more readable.

=head2 Improved Vertical Alignment

Coding modifications are underway to improve the vertical alignment
logic.

=head2 Documentation

A FAQ is being written to explain some of the more subtle formatting
issues, and to give examples of different styles.

The tokenizer needs extensive documentation before it can be released as
a separate module.

=head2 HTML writer

The HTML writer does not colorize interpolated identifiers in here
documents or quoted strings.  The tokenizer outputs interpolation
information for here docs; it still needs to be updated to do this for
multi-line quotes.  Then code needs to be written to scan for and markup
identifiers.

=head2 Tokenization issues

There are some subtle issues with distinguishing block types that should
be addressed to make the tokenizer more correct, even though they do not
interfere with code beautification.  For example, in most cases the type
of a brace is known when it is encountered. But given this coding
 
 sub something {
     {
        bla, bla
     }
     ..
 }

we have to examine the first couple of tokens of the interior 
braces to see if it is a code block or anonymous hash reference.  This
needs to be done.  Also, brace types of something like ${ ... } are
not currently labeled as code blocks because this simplifies formatting.
However, this should be done eventually for correctness.

Token type 'M' (for Method) has been reserved for subroutine definition
names.  It needs to be implemented; I've patched around this in the html
writer for now.  I'm considering new token types for prototypes and
attributes, to simplify parsing and formatting.

=head2 Outdent block comments as a group

At present, the decision to outdent a long block comment, when that
option is used, is made on a line-by-line basis.  Instead, the decision
should be made for a sequence of comments as a group, so that the result
is not ragged.  This is a relatively straightforward update.

=head2 Option to reformat block comments

I'm looking into an option to use Text::Autoformat to reformat comments.
Thanks to Tim Maher for this suggestion.  I made some preliminary tests
on code from a variety of sources and decided that this is probably best
left for an interactive tool, something like a spelling checker, which
would walk through a file looking for groups of comments, and present a
proposed a reformatting to the user with a Y/N response request.  

One way to do this would be to first implement the XML feature mentioned
above, and then write a separate utility to read and process the XML.

=head2 Switch/Case formatting

There is a request to have perltidy format switch/case statements.
