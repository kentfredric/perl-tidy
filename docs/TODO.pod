=head1 Perltidy TODO List

This is a "wish-list" of features to add and things to do.  

=head2 Improved Vertical Alignment

Coding modifications are underway to significantly enhance the vertical
alignment.  This is the highest priority and will probably be complete
mid-October.

=head2 Fix numerous little formatting issues

One item is that at present, the -lp option breaks lists like this:

     my $data = pack(
                      "vvvvvvvvv", $xWn,     $yWn,     $dxWn,
                      $dyWn,       $grbit,   $itabCur, $itabFirst,
                      $ctabsel,    $wTabRatio
                      );

I would like to provide an option which does not break after the '(',
and before the terminal ), like this:

     my $data = pack( "vvvvvvvvv", $xWn,     $yWn,     $dxWn,
                      $dyWn,       $grbit,   $itabCur, $itabFirst,
                      $ctabsel,    $wTabRatio);

This should be easy to implement after the new vertical aligner is
completed.

=head2 BUGS

There are still a couple of bugs listed in the BUGS file that need
to be fixed.  These are low priority compared to formatting
issues, but need to be done.

=head2 Option to reformat block comments

I'm looking into an option to use Text::Autoformat to reformat comments.
Thanks to Tim Maher for this suggestion.  Some preliminary testing suggests
that this might best be an interactive tool, something like a spelling checker,
which would walk through a file looking for groups of comments, and present a
proposed a reformatting to the user with a Y/N response request.

=head2 Documentation

A FAQ or maybe COOKBOOK needs to be written, to explain some of the
more subtle formatting issues, and to give examples of different
styles.

The tokenizer needs extensive documentation before it can be released
as a separate module.

=head2 Tokenization issues

Token type 'M' (for Method) has been reserved for subroutine definition
names.  It still needs to be implementd; I've patched around this in
the html writer for now.  I'm considering new token types for
prototypes and attributes, to simplify parsing and formatting.

There are some subtle issues with distinguishing block types that should
be addressed to make the tokenizer more correct, even though they do not
interfere with code beautification.  For example, in most cases the type
of a brace is known when it is encountered. But given this coding
 
 sub something {
     {
        bla, bla
     }
     ..
 }

you have to examine the first few tokens of the interior set of to
braces to see if it is a code block or anonymous hash reference.  This
isn't done yet.

=head2 Modularization

It is planned to release perltidy in modules, hopefully this year.
However, the development of the tokenizer and formatter is still very
tightly coupled, and there are still some open tokenization issues that
need to be resolved before the program is split into pieces.  Anyone is
welcome, of course, to extract the tokenizer and use it for other
projects, but it would be good to let me know so that we can coordinate
updates to the tokenizer.
