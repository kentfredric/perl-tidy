Welcome to perltidy!
    Perltidy is a tool to indent and reformat perl scripts.

    Perltidy is free software released under the GNU General Public License
    -- please see the included file "LICENSE" for details.

    There are two source distribution files, a .tgz "tarball" for unix
    systems and a zip file, .zip for Windows. The only differences is that
    the line endings have been changed to <cr><lf> for the Windows version.

    Besides the source distribution files, a set of test files is available
    in a separate package (but there is no automated test procedure yet).
    These are distributed separately because they will not be of interest to
    the average user. If you do want the test files, you should untar or
    unzip them at the same directory that you untar or unzip the source
    files.

    Please see the ChangeLog for notices of any recent updates.

  Installation - Unix

    Try this quick test. Look at lextest.pl with your editor - it's a mess.

    Now issue the command

     perl ./perltidy lextest.pl

    and then look at the output file, which will be lextest.pl.tdy. You
    should see a nicely formatted version of the program, in which perltidy
    has added indentation, whitespace, and line breaks. This simple example
    illustrates what perltidy does.

    Perltidy does not require any special modules. We just have to get the
    script in your path and, optionally, install two man pages. You probably
    know the routine:

    1. If the script is not executable, use

     chmod +x perltidy

    2. Verify that the initial line in perltidy works for your system by
    entering:

     ./perltidy -h

    which should produce the usage text and then exit. This should usually
    work, but if it does not, you will need to change the first line in
    perltidy to reflect the location of perl on your system. On a Unix
    system, you might find the path to perl with the command 'which perl'.

    3. Edit Makefile to have the correct paths. See the comments in the
    Makefile.

    You will need to become root unless you change the paths to point to
    somewhere in your home directory. Then issue the command

     make install

    This installs perltidy and the man pages perltidy.1 and perl2web.1.

    5. Test the installation using

     perltidy -h

    You should see the usage screen. Then, if you installed the man pages,
    try

     man perltidy

    which should bring up the manual page.

    If you ever want to remove perltidy, you can remove perltidy and its man
    pages by hand or use

     make uninstall

  Windows ME WARNING

    Some limited testing gave these discouraging results when attempting to
    run perltidy with Active State Perl with Windows ME:

        Binary Build    Perl Version  Windows Result
        522             5.005_03      95      ok
        623             5.6.0         ME      Windows freezes
        628             5.6.1         ME      Windows freezes
        628             5.6.1         95      ok

    I've only tested one Windows ME system, so this may be specific to that
    machine (a new Dell with no known hardware problems). The crash was so
    bad that even alt+control+delete did not work. If you decide to try to
    run perltidy on a Windows ME machine, please close all existing
    applications first to avoid losing any data. I would like to hear of any
    successes or failures (is it just ME?) so that we can ask ActiveState to
    look into it if this is a general problem.

    As far as I know, perltidy runs ok under ActiveState Perl and Windows
    95.

  Installation - Windows

    Here is how to install perltidy under Windows. After unpacking the zip
    file, test the script:

     perl perltidy lextest.pl

    This will produce an output file lextest.pl.tdy which can be compared to
    the input file. (This is the point at which the above Windows ME machine
    hung badly).

    Placing perltidy and perltidy.bat in your path should work. (You can
    determine your path by issuing the msdos command "PATH"). However, the
    batch file probably will not support file redirection. So, for example,
    to pipe the long help message through 'more', you might have to invoke
    perltidy with perl directly, like this:

     perl \somepath\perltidy -h | more

    The documentation that comes with your perl distribution discusses other
    installation options.

  Windows problem with command.com

    There is a minor problem that you should be aware of if you are running
    perltidy (and perl) under Windows with the command.com shell. The
    problem is that command.com always sends the standard error output to
    the screen. This makes it impossible for perltidy to capture the message
    'syntax OK' when it runs 'perl -c' with the following code:

            my $perl_output = <<`END`;
                    perl -c $filename 2>&1
            END

    It also creates an empty file named &1. This means that you will have to
    check for syntax errors yourself. If you do not want to create the empty
    file &1, you can turn off syntax checking with the flag -nsyn. You can
    then check the syntax of a file manually by issuing the command

     perl -c filename

    The best way to solve this problem is probably to use a better shell,
    such as bash - see http://www.cygwin.com. If anyone knows a way to code
    around this in perl please let me know.

  VMS Notes

    Perltidy runs under VMS, thanks to Michael Cartmell. You will probably
    want to use the .zip distribution file to get the <cr><lf> line endings.
    File extensions will use an underscore character instead of a dot, so

          perltidy myfile.pl

    will generate the output file myfile.pl_tdy instead of myfile.pl.tdy,
    and so on.

    If your script starts with a non-perl invocation, eg the following,

     $ perl                               !This is DCL not perl
     $ deck/dollar="$$Not-In-Perl$$"      !This is DCL not perl
     #!/usr/bin/perl

    you must use the -x flag to tell perltidy to wait until the "hash bang"
    line to start parsing, like this:

          perltidy -x myfile.pl

    Information on running perl under VMS can be found at:

     http://w4.lns.cornell.edu/~pvhp/perl/VMS.html

  Bug Notices for Current Users

    Please see the ChangeLog for details. The most serious bugs that have
    been reported are as follows:

    Release 20010608 had a bug with the -t option in which a tab would be
    added before the last line of a multiline quote or pattern. Scripts
    formatted with -t on this version should be run once with the -chk
    option to see if this might have happened.

    Prior to release 20010608, there was a bug which perltidy removed
    trailing white space from multiline quotes.

    Prior to release 20010406, there was a bug which perltidy accidentally
    added continuation indentation to the last line of some multi-line
    quotes and patterns. A special new flag, -chk, has been added to check
    for this error. You should rerun previously formatted scripts once with
    the -chk flag to check for this. It will warn of all possible occurances
    of this error.

    Prior to release 20010328, there was a bug which perltidy accidentally
    promoted a function name following a print or printf to a filehandle.
    For example,

      print usage() and exit;

    became

      print usage () and exit;

    The result is that perl then considers 'usage' to be a filehandle. To
    fix this, just rerun with the latest version of perltidy. It will look
    for this situation and issue a warning.

WHAT NEXT
    The documentation has been supplied as man pages, as html files, and as
    text files.

    Reading the brief tutorial should help you use perltidy effectively.

    These documents can also be found at http://perltidy.sourceforge.net

    Perltidy is still being developed, so please check sourceforge
    occasionally for updates if you find that it is useful. New releases are
    announced on freshmeat.net.

FEEDBACK / BUG REPORTS
    If you see ways to improve this document for the particular system on
    which you install perltidy, please let the author know so that it can be
    updated.

    Bug reports, comments and suggestions are welcome. Attach the smallest
    piece of code which demonstrates the bug or issue, plus a .LOG file from
    a perltidy run, if appropriate. Your efforts are greatly appreciated.

    Thank You

     Steve Hancock
     perltidy at users.sourceforge.net
     http://perltidy.sourceforge.net

