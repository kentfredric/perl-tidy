Perltidy TODO List
    This is a "wish-list" of features to add and things to do.

  Fix numerous little formatting issues

    There are a large number of little open formatting issues. I'm working
    on them as time permits.

  Modularization

    Modularization work is in progress. I hope to have modularization
    patches made by Hugh Myers integrated into the next release.

  BUGS

    There are still a couple of bugs listed in the BUGS file that need to be
    fixed. These are low priority compared to formatting issues, but need to
    be done.

  Improved Vertical Alignment

    Coding modifications are underway to improve the vertical alignment
    logic.

  XML

    The ability to write a tokenized script in XML looks very useful. This
    would allow the creation of simple utilities to reliably manipulate perl
    code.

  Documentation

    A FAQ is being written to explain some of the more subtle formatting
    issues, and to give examples of different styles.

    The tokenizer needs extensive documentation before it can be released as
    a separate module.

  HTML writer

    The HTML writer does not colorize interpolated identifiers in here
    documents or quoted strings. The tokenizer outputs interpolation
    information for here docs; it still needs to be updated to do this for
    multiline quotes. Then code needs to be written to scan for and markup
    identifiers.

  Tokenization issues

    Token type 'M' (for Method) has been reserved for subroutine definition
    names. It needs to be implementd; I've patched around this in the html
    writer for now. I'm considering new token types for prototypes and
    attributes, to simplify parsing and formatting.

    There are some subtle issues with distinguishing block types that should
    be addressed to make the tokenizer more correct, even though they do not
    interfere with code beautification. For example, in most cases the type
    of a brace is known when it is encountered. But given this coding

     sub something {
         {
            bla, bla
         }
         ..
     }

    you have to examine the first few tokens of the interior set of to
    braces to see if it is a code block or anonymous hash reference. This
    needs to be done.

  Option to reformat block comments

    I'm looking into an option to use Text::Autoformat to reformat comments.
    Thanks to Tim Maher for this suggestion. Some preliminary testing
    suggests that this might best be an interactive tool, something like a
    spelling checker, which would walk through a file looking for groups of
    comments, and present a proposed a reformatting to the user with a Y/N
    response request.

    One way to do this would be to first implement the XML feature mentioned
    above, and then write a utility to read the XML and process it.

