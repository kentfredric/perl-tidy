.bgcolor ="FFFFFF"
.title Html Output

.line_comment 0
.side_comment 0

Perltidy can write syntax-colored html. 
Not only is it useful for publishing code snippets on the web, it is a useful
debugging tool.  Take a look at the following file, <code>print3.t</code>; 
it has a bug:
<hr>
<pre>
# demonstrate perl's weird parsing rules
$a=4;
print $a/ 2, "/hi";    # division
print $a / 2, "/hi";    # division
print $a/ 2, "/hi";     # division
print $a /2,"/ hi ";  # pattern (and error)!
</pre>

<hr>
Here is what a syntax check with perl produces <code> perl -c print3.t</code>:
<pre>
Bareword found where operator expected at print3.t line 6, near "/2,"/ hi"
	(Missing operator before hi?)
syntax error at print3.t line 6, near "/2,"/ hi "
String found where operator expected at print3.t line 6, at end of line
	(Missing semicolon on previous line?)
Can't find string terminator '"' anywhere before EOF at print3.t line 6.
</pre>

<hr>

Perltidy also finds the error.  To really see the error, though,
we can issue the command <code>perltidy -html print3.t</code>
which produces the following file, <code>print3.t.html</code>:

<hr>

<PRE>
<FONT COLOR="#228B22"># demonstrate perl's weird parsing rules</FONT>
<FONT COLOR="#00688B">$a</FONT><FONT COLOR="#000000">=</FONT><FONT COLOR="#B452CD">4</FONT><FONT COLOR="#000000">;</FONT>
<STRONG><FONT COLOR="#8B4513">print</FONT></STRONG> <FONT COLOR="#00688B">$a</FONT><FONT COLOR="#000000">/</FONT> <FONT COLOR="#B452CD">2</FONT><FONT COLOR="#000000">,</FONT> <FONT COLOR="#CD5555">&quot;/hi&quot;</FONT><FONT COLOR="#000000">;</FONT>    <FONT COLOR="#228B22"># division</FONT>
<STRONG><FONT COLOR="#8B4513">print</FONT></STRONG> <FONT COLOR="#00688B">$a</FONT> <FONT COLOR="#000000">/</FONT> <FONT COLOR="#B452CD">2</FONT><FONT COLOR="#000000">,</FONT> <FONT COLOR="#CD5555">&quot;/hi&quot;</FONT><FONT COLOR="#000000">;</FONT>    <FONT COLOR="#228B22"># division</FONT>
<STRONG><FONT COLOR="#8B4513">print</FONT></STRONG> <FONT COLOR="#00688B">$a</FONT><FONT COLOR="#000000">/</FONT> <FONT COLOR="#B452CD">2</FONT><FONT COLOR="#000000">,</FONT> <FONT COLOR="#CD5555">&quot;/hi&quot;</FONT><FONT COLOR="#000000">;</FONT>     <FONT COLOR="#228B22"># division</FONT>
<STRONG><FONT COLOR="#8B4513">print</FONT></STRONG> <FONT COLOR="#00688B">$a</FONT> <FONT COLOR="#CD5555">/2,&quot;/</FONT> <FONT COLOR="#000000">hi</FONT> <FONT COLOR="#CD5555">&quot;;  # pattern (and error)!</FONT>

</PRE>
<hr>
Now the problem is evident.  The first three <code>/</code> symbols are black, and
hence divisions.  The fourth, however, starts a pattern which contains
the text <code>2,"</code>, and then follows the bare word <code>hi</code>,
and then we start a quotation which has no terminating <code>"</code>.
Perl took <code>$a</code> to be a file handle in
the fourth line (even though we set it equal to <code>4</code>!).  This problem is briefly described in the perlfunc(1) man
pages.
<p>
Not many syntax-coloring tools would have caught this problem.  Perltidy did
because it does a very careful tokenization of the file.
